on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  # check if this is a new release
  smoke:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tea.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        id: tea

      - id: rev-parse
        name: did we already publish this version?
        run: |
          # fetch tags since actions/checkout is a shallow checkout
          git fetch --prune --unshallow --tags

          if git show-ref --tags v${{ steps.tea.outputs.version }} --quiet; then
            echo "::set-output name=result::cancel"
          fi

      - uses: andymckay/cancel-action@0.2
        if: ${{ steps.rev-parse.outputs.result == 'cancel' }}

  ci:
    needs: [smoke]
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  ci-pre-reqs:
    needs: [smoke]
    uses: ./.github/workflows/ci-pre-reqs.yml
    secrets: inherit

  put:
    permissions:
      contents: write
      deployments: write
    needs: [ci1, ci2, smoke]
    runs-on: ubuntu-latest
    steps:
      - name: Create Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          env: aws

      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - run: |
          aws s3 cp \
            ./install.sh s3://www.tea.xyz/pour.sh \
            --metadata-directive REPLACE \
            --cache-control no-cache,must-revalidate
      - run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CF_DISTRIBUTION_ID }} \
            --paths / /pour.sh

      - run: |
          git tag v${{ needs.smoke.outputs.version }}
          git push origin v${{ needs.smoke.outputs.version }}

      - uses: softprops/action-gh-release@v1
        with:
          files: ./install.sh
          tag_name: v${{ needs.smoke.outputs.version }}
          fail_on_unmatched_files: true

      - uses: fischerscode/tagger@v0
        with:
          prefix: v
          tag: v${{ needs.smoke.outputs.version }}

      - name: Seal Deployment
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          env: aws
          step: finish
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
