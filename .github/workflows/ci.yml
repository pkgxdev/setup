on:
  pull_request:
    paths:
      - action.yml
      - install.sh
      - .github/workflows/ci.yml
      - action.js
      - README.md
  workflow_call:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}/1
  cancel-in-progress: true

jobs:
  transitory:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        verbose:
          - null
        os:
        - macos-latest
        - ubuntu-latest
        include:
        - os: ubuntu-latest
          verbose: VERBOSE
    steps:
      - uses: actions/checkout@v3
      - run: echo foo > foo
      - run: ./install.sh --yes node --eval 'console.log(1)'
        env:
          VERBOSE: ${{ matrix.verbose }}

  direct:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - [self-hosted, macOS, ARM64]
          - [self-hosted, linux, ARM64]
        prefix:
          - ~
          - foo
        include:
        - os: ubuntu-latest
          verbose: VERBOSE
          prefix: /opt/tea
          # ^^ test absolute path (on mac this path is not writable with the
          # default runner user)
    steps:
      - uses: actions/checkout@v3
      - run: ./install.sh --yes --prefix ${{ matrix.prefix }}
        if: ${{ matrix.prefix }}
        env:
          VERBOSE: ${{ matrix.verbose }}
      - run: ./install.sh --yes
        if: ${{ matrix.prefix == null }}
        env:
          VERBOSE: ${{ matrix.verbose }}
      - run: tea --env
      - run: tea --env xc check
      # ^^ tea -E necessary because we run the install script and not the action
      # so no additions to PATH or magic is installed
      - run: which tea
      - run: find "$(tea --silent --prefix)"/tea.xyz
      - run: find /opt/tea.xyz -name v0.? -o -name v0.?? -mindepth 1 -maxdepth 1 -print0 | xargs -0 test -L
      - run: test -L "$(tea --silent --prefix)"/tea.xyz/v0

  gha:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - [self-hosted, macOS, ARM64]
          - [self-hosted, linux, ARM64]
        prefix:
          - null
          - /opt
        container:
          - null
        include:
        - os: ubuntu-latest
          container: debian:buster-slim
          srcroot: .
        - os: ubuntu-latest
          container: debian:buster-slim
          srcroot: null
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v3

      - uses: ./
        id: tea
        with:
          prefix: ${{ matrix.prefix }}
          srcroot: ${{ matrix.srcroot || github.workspace }}

      - run: test -n "$VERSION"
      - run: test -n "${{ steps.tea.outputs.version }}"
      - run: test v$VERSION = v${{ steps.tea.outputs.version }}
      - run: tea --env
      - run: which tea
      - run: tea xc check
      - run: node --eval 'console.log(1)'

  chaste:
    runs-on: ubuntu-latest
    container: debian:buster-slim
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          chaste: true
      - run:
          if node --version; then
            exit 1;
          fi

  additional-pkgs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          +deno.land: ^1.30
        # ^^ produces a warning, but we like this syntax
        # we're hoping GH allows us to suppress this warning in the future
        # discussion: https://github.com/octokit/request-action/issues/26
      - run: deno --version

  additional-pkgs-2:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        with:
          +: |
            deno.land^1.30
            cli.github.com
      - run: deno --version
      - run: gh --version

  multiple-apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./
      - run: tea --version
      - uses: ./
      - run: tea --version
      - run: ./install.sh   # also test our script does a headless update in this case

  # tests that we don’t require a “srcroot”
  emptier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: sudo rm -rf .git README.md
      - uses: ./

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ludeeus/action-shellcheck@1.1.0
        with:
          severity: warning
        env:
          SHELLCHECK_OPTS: --shell dash

  check-external-gum:
    runs-on: ubuntu-latest
    steps:
      - uses: Homebrew/actions/setup-homebrew@master
      - run: brew install gum
      - uses: actions/checkout@v3
      - uses: ./
      - run: test ! -d ~/.tea/charm.sh

  specific-version:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        system:
          - gha
          - direct
        version:
          - 0.21.0
          - 0.19.4
          - 0.18.1
          - 0.17.3
    steps:
      - uses: actions/checkout@v3
      - uses: ./
        if: ${{ matrix.system == 'gha' }}
        with:
          version: ${{ matrix.version }}
      - run: ./install.sh --yes --version ${{ matrix.version }}
        if: ${{ matrix.system == 'direct' }}
      - run: test "$(tea --version)" = "tea ${{ matrix.version }}"

  sudo-not-required:
      runs-on: ubuntu-latest
      container: debian:buster-slim
      steps:
        - uses: actions/checkout@v3
        - run: apt-get update && apt-get --yes install curl
        - run: ./install.sh --yes

  #FIXME can't test for this without a way to install without magic in headless mode
  # sudo-required:
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v3
  #       - run: sudo chmod go-w /usr/local/bin
  #       # ^^ we run as `runner` but this dir has 999 perms
  #       - run: ./install.sh --yes
  #       - run: .github/smoke-test.sh
  #       - run: test $(which tea) = /usr/local/bin/tea
  #
  # no-usr-local:
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v3
  #       - run: sudo rm -rf /usr/local # this is fine, right?
  #       - run: sudo chmod 777 /usr    # and this
  #       - run: ./install.sh --yes
  #       - run: .github/smoke-test.sh
  #       - run: test $(which tea) = /usr/local/bin/tea

  tea-with-magic-is-in-expected-place:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - run: ./install.sh --yes
        - run: .github/smoke-test.sh
        - run: test $(which tea) = $HOME/.tea/tea.xyz/v0/bin/tea

  installs-if-gitea-found:
    runs-on: ubuntu-latest
    steps:
      - name: install gitea
        run: |
          sudo curl -sL -o /etc/apt/trusted.gpg.d/morph027-gitea.asc https://packaging.gitlab.io/gitea/gpg.key
          echo "deb https://packaging.gitlab.io/gitea gitea main" | sudo tee /etc/apt/sources.list.d/morph027-gitea.list
          sudo apt-get update
          sudo apt-get install gitea morph027-keyring
          sudo mv /usr/bin/gitea /usr/bin/tea
        # ^^ lol actually pretty much the only time `gitea` installs as `tea` is via `brew`
      - name: test gitea is there
        run: |
          dpkg -L gitea
          which tea
          tea --help
      - uses: actions/checkout@v3
      - run: ./install.sh --yes
      - run: .github/smoke-test.sh

  run-without-which:
    runs-on: ubuntu-latest
    container: archlinux:latest
    steps:
        - uses: actions/checkout@v3
        - run: ./install.sh --yes
        - run: .github/smoke-test.sh

  run-with-existing-gum:
    runs-on: macos-latest
    steps:
        - uses: actions/checkout@v3
        - run: brew install gum
        - run: ./install.sh --yes
        - run: .github/smoke-test.sh
